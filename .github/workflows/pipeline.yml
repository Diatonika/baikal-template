name: Main Pipeline

on: [ push ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest

    env:
      NEXUS_READ_USER: ${{ secrets.NEXUS_READ_USER }}
      NEXUS_READ_PASS: ${{ secrets.NEXUS_READ_PASS }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Python ${{ vars.PYTHON_VERSION }} Environment Setup
        uses: actions/setup-python@v5
        with:
          python-version: ${{ vars.PYTHON_VERSION }}
      - name: Environment Preparation
        run: pip install "poetry >= 2.0" "rust-just >= 1.0"
      - name: Dependencies Installation
        run: just init --only main,lint
      - name: Format
        id: format
        run: just format-check
        continue-on-error: true
      - name: Lint
        id: lint
        run: just lint-check
        continue-on-error: true
      - name: Failure Action
        if: steps.format.outcome == 'failure' || steps.lint.outcome == 'failure'
        run: exit 1

  semantic-release:
    name: Semantic Release Bump
    needs: [ lint ]
    runs-on: ubuntu-latest

    if: github.ref == 'refs/heads/main'

    outputs:
      released: ${{ steps.release.outputs.released }}

    steps:
      - name: Generate Automation Access Token
        id: bot-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.AUTOMATION_ID_APP }}
          private-key: ${{ secrets.AUTOMATION_SSH_PRIVATE }}
      - name: Generate Git Name & Email
        id: bot-credentials
        run: |
          echo 'bot-email=${{ secrets.AUTOMATION_ID_USER }}+${{ steps.bot-token.outputs.app-slug }}[bot]@users.noreply.github.com' >> $GITHUB_OUTPUT
          echo 'bot-name=${{ steps.bot-token.outputs.app-slug }}[bot]' >> $GITHUB_OUTPUT
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          persist-credentials: false
          token: ${{ steps.bot-token.outputs.token }}
      - name: Invoke Semantic Release
        id: release
        uses: python-semantic-release/python-semantic-release@v9
        with:
          build: ${{ vars.PYTHON_APP != 'true' }}
          github_token: ${{ steps.bot-token.outputs.token }}
          git_committer_email: ${{ steps.bot-credentials.outputs.bot-email }}
          git_committer_name: ${{ steps.bot-credentials.outputs.bot-name }}
          ssh_public_signing_key: ${{ secrets.AUTOMATION_SSH_PUBLIC }}
          ssh_private_signing_key: ${{ secrets.AUTOMATION_SSH_PRIVATE }}
        env:
          NEXUS_READ_USER: ${{ secrets.NEXUS_READ_USER }}
          NEXUS_READ_PASS: ${{ secrets.NEXUS_READ_PASS }}
      - name: Upload Wheel Artifact
        if: steps.release.outputs.released == 'true' && vars.PYTHON_APP != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: release-wheel
          path: ${{ github.workspace }}/dist/*.whl
      - name: Upload Dist Artifact
        if: steps.release.outputs.released == 'true' && vars.PYTHON_APP != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: release-dist
          path: ${{ github.workspace }}/dist/*.tar.gz

  publish:
    name: Publish to PyPI
    needs: [ semantic-release ]
    runs-on: ubuntu-latest

    if: needs.semantic-release.outputs.released == 'true' && vars.PYTHON_APP != 'true'

    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: release-dist
          path: dist
      - name: Push Dist to PyPI
        run: curl -F package=@$(find ./dist -maxdepth 1 -name *.tar.gz) https://${{ secrets.NEXUS_WRITE_USER }}@push.fury.io/zitrasa/
